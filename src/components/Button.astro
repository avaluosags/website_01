---
interface Props {
  size?: string;
  theme?: string;
  text: string;
  iconLeft?: string;
  iconRight?: string;
  alt?: string;
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
}

const {
  size = "small",
  theme = "primary-bg",
  text,
  iconLeft,
  iconRight,
  alt = "",
  type = "button",
  disabled = false,
} = Astro.props;

const getButtonSize = (size: string) => {
  switch (size) {
    case "small":
      return "w-35 h-6";
    case "super-small":
      return "w-17 h-6 xl:w-35 xl:h-6";
    case "hiper-small":
      return "w-9 h-2 xl:w-15 xl:h-4";
    case "responsive":
      return "w-21 sm:w-39 h-6";
    default:
      return "px-10 h-12";
  }
};

const getButtonTheme = (theme: string) => {
  switch (theme) {
    case "primary-bg":
      return "bg-primary_super text-white";
    case "primary-bg-white":
      return "bg-white text-primary_super";
    case "secondary-bg":
      return "bg-transparent text-primary_super border border-primary_super";
    case "secondary-bg-white":
      return "bg-transparent text-primary_super border border-white";
    case "terciary":
      return "underline decoration-primary_super text-left";
    default:
      return "bg-primary_super text-white";
  }
};
---

<button
  type={type}
  disabled={disabled}
  class={`${getButtonTheme(theme)} ${getButtonSize(size)} font-bold rounded-[50px] flex flex-row items-center justify-center gap-2`}
>
  {iconLeft && (
    <img class="w-4" src={iconLeft} alt={alt} />
  )}
  <span class="text-2 font-bold capitalize">{text}</span>
  {iconRight && (
    <img class="w-4" src={iconRight} alt={alt} />
  )}
</button>
